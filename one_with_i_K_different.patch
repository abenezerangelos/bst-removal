Index: solution.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/solution.py b/solution.py
--- a/solution.py	
+++ b/solution.py	(date 1685322119818)
@@ -9,7 +9,7 @@
        [4,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,54],
        [0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],
        [2,10,12,14,16,19],
-       [10,22,25,28,31,37.75],
+       [10,22,25,28,31],
        [1,4,6],
        [14,18,21,25,28,32]]
 input1=[ [4, 30, 50],
@@ -29,40 +29,34 @@
     for i in range(len(pegs) - 1):
         da.append(pegs[i+1] - pegs[i])
     dictionary=OrderedDict()
+    dictionary[0]=[0]
     summation = 0
     for i in range(len(pegs)):
         if i==0 or i ==len(pegs)-1:
             dictionary.setdefault(pegs[i],[1])
         else:
             dictionary.setdefault(pegs[i],[1,1])
-    keys = list(dictionary.keys())
+    keys = list(dictionary.keys())[1:]
     increment = Decimal('0.1')
     number = 0 + increment
-    dictionary_values = list(dictionary.values())
+    dictionary_values = list(dictionary.values())[1:]
     while summation!=distance and number<da[0]-increment:
+        i=0
         summation = 0
         for k in range(len(dictionary_values)):
-            if k==0 or k==len(keys)-1:
-                dictionary[keys[0]][0]=number
-                dictionary[keys[len(keys)-1]][0]=number/2
-            elif k>len(keys)-1:
-                print("CAUTION,DANGER!!!")
-                exit("Fix code")
+            if i==0 or i==len(keys)-1:
+                dictionary[keys[0]][0]=number*2
+                dictionary[keys[len(keys)-1]][0]=number
+            elif i>len(keys)-1:
                 pass
             else:
-                replacement=da[k-1]-dictionary[keys[k-1]][0]
+                replacement=da[i-1]-dictionary[keys[i-1]][0]
                 if replacement>0:
-                    dictionary[keys[k]][0]=replacement
-                    dictionary[keys[k]][1]=replacement
-            # print(k)
-            print("Dictionary values:",dictionary_values, dictionary_values[k])
-
+                    dictionary[keys[i]][0]=replacement;dictionary[keys[i]][1]=replacement
+            i+=1
             summation += sum(dictionary_values[k])
-        # print("Dictionary",dictionary)
-        print("DA",da)
-        print("Summation",summation)
         if summation==distance:
-            return[int(Fraction(number).limit_denominator().numerator),int(Fraction(number).limit_denominator().denominator)]
+            return[int(Fraction(number*2).limit_denominator().numerator),int(Fraction(number*2).limit_denominator().denominator)]
         number+=increment
     return [-1,-1]
 
@@ -100,7 +94,7 @@
     return [radius.numerator, radius.denominator]
 
 start=time.time()
-for i in input:
+for i in input1:
     result=solution(i)
     print("RESULT",result)
 end=time.time()
